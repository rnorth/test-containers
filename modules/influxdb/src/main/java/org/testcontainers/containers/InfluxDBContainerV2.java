package org.testcontainers.containers;

import com.influxdb.client.InfluxDBClient;
import com.influxdb.client.InfluxDBClientFactory;
import com.influxdb.client.InfluxDBClientOptions;
import java.util.Optional;
import org.testcontainers.containers.wait.strategy.Wait;
import org.testcontainers.containers.wait.strategy.WaitAllStrategy;
import org.testcontainers.utility.DockerImageName;

/**
 * Refer to
 * <a href="https://hub.docker.com/_/influxdb"> the official InfluxDB 2.x container repository</a>
 * on docker hub for detailed documentation and newest tags.
 */
public class InfluxDBContainerV2 extends GenericContainer<InfluxDBContainerV2> {

    public static final Integer INFLUXDB_PORT = 8086;

    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse("influxdb");
    private static final int NO_CONTENT_STATUS_CODE = 204;

    private String username = "test-user";
    private String password = "test-password";
    private String bucket = "test-bucket";
    private String organization = "test-org";
    private Optional<String> retention = Optional.empty();
    private Optional<String> adminToken = Optional.empty();


    public InfluxDBContainerV2(final DockerImageName imageName) {
        super(imageName);
        imageName.assertCompatibleWith(DEFAULT_IMAGE_NAME);
        this.waitStrategy = (new WaitAllStrategy())
            .withStrategy(Wait
                .forHttp("/ping")
                .withBasicCredentials(this.username, this.password)
                .forStatusCode(NO_CONTENT_STATUS_CODE))
            .withStrategy(Wait.forListeningPort());
        this.addExposedPort(INFLUXDB_PORT);
    }

    /**
     * <p>
     * The InfluxDB image contains some extra functionality to automatically bootstrap the system. This functionality is
     * enabled by setting the DOCKER_INFLUXDB_INIT_MODE environment variable to the value "setup" when running the
     * container. Additional environment variables are used to configure the setup logic:
     * <ul>
     * <li> DOCKER_INFLUXDB_INIT_USERNAME: The username to set for the system's initial super-user (Required).
     * <li> DOCKER_INFLUXDB_INIT_PASSWORD: The password to set for the system's initial super-user (Required).
     * <li> DOCKER_INFLUXDB_INIT_ORG: The name to set for the system's initial organization (Required).
     * <li> DOCKER_INFLUXDB_INIT_BUCKET: The name to set for the system's initial bucket (Required).
     * <li> DOCKER_INFLUXDB_INIT_RETENTION: The duration the system's initial bucket should retain data. If not set,
     * the initial bucket will retain data forever.
     * <li> DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: The authentication token to associate with the system's initial
     * super-user. If not set, a token will be auto-generated by the system.
     * </ul>
     * <br>
     * See
     * <a href="https://hub.docker.com/_/influxdb">
     * full documentation
     */
    @Override
    protected void configure() {
        this.addEnv("DOCKER_INFLUXDB_INIT_MODE", "setup");
        this.addEnv("DOCKER_INFLUXDB_INIT_USERNAME", this.username);
        this.addEnv("DOCKER_INFLUXDB_INIT_PASSWORD", this.password);
        this.addEnv("DOCKER_INFLUXDB_INIT_ORG", this.organization);
        this.addEnv("DOCKER_INFLUXDB_INIT_BUCKET", this.bucket);
        this.retention.ifPresent(ret -> this.addEnv("DOCKER_INFLUXDB_INIT_RETENTION", ret));
        this.adminToken.ifPresent(token -> this.addEnv("DOCKER_INFLUXDB_INIT_ADMIN_TOKEN", token));
    }

    /**
     * Set env variable `DOCKER_INFLUXDB_INIT_USERNAME`.
     *
     * @param username The name of a user to be created with no privileges. If `INFLUXDB_BUCKET` is set, this user will
     * be granted read and write permissions for that database.
     * @return a reference to this container instance
     */
    public SELF withUsername(final String username) {
        this.username = username;
        return this.self();
    }

    /**
     * Set env variable `DOCKER_INFLUXDB_INIT_PASSWORD`.
     *
     * @param password The password for the user configured with `INFLUXDB_USER`. If this is unset, a random password is
     * generated and printed to standard out.
     * @return a reference to this container instance
     */
    public SELF withPassword(final String password) {
        this.password = password;
        return this.self();
    }

    /**
     * Set env variable `DOCKER_INFLUXDB_INIT_ORG`.
     *
     * @param organization The organization for the initial setup of influxDB.
     * @return a reference to this container instance
     */
    public SELF withOrganization(final String organization) {
        this.organization = organization;
        return this.self();
    }

    /**
     * Set env variable `DOCKER_INFLUXDB_INIT_BUCKET`.
     *
     * @param bucket Automatically initializes a bucket with the name of this environment variable.
     * @return a reference to this container instance
     */
    public SELF withBucket(final String bucket) {
        this.bucket = bucket;
        return this.self();
    }

    /**
     * Set env variable `DOCKER_INFLUXDB_INIT_RETENTION`.
     *
     * @param retention Duration bucket will retain data (0 is infinite, default is 0).
     * @return a reference to this container instance
     */
    public SELF withRetention(final String retention) {
        this.retention = Optional.of(retention);
        return this.self();
    }

    /**
     * Set env variable `DOCKER_INFLUXDB_INIT_ADMIN_TOKEN`.
     *
     * @param adminToken Authentication token to associate with the admin user.
     * @return a reference to this container instance
     */
    public SELF withAdminToken(final String adminToken) {
        this.adminToken = Optional.of(adminToken);
        return this.self();
    }


    /**
     * This method uses the InfluxDBClientOptions builder to build a InfluxDB client
     *
     * @return a InfluxDB client
     * @see InfluxDBClientOptions
     * @see InfluxDBClient
     */
    public InfluxDBClient getInfluxDBClient() {
        final InfluxDBClientOptions influxDBClientOptions = InfluxDBClientOptions.builder()
            .url(this.getUrl())
            .authenticate(this.username, this.password.toCharArray())
            .bucket(this.bucket)
            .org(this.organization)
            .build();
        return InfluxDBClientFactory.create(influxDBClientOptions);
    }

    /**
     * @return a url to influxDb
     */
    public String getUrl() {
        return "http://" + this.getHost() + ":" + this.getMappedPort(INFLUXDB_PORT);
    }
}
